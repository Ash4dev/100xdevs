/**
You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
- Don't use any database, just store all the data in an array to store the todo list data (in-memory)
- Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

Each todo has a title and a description. The title is a string and the description is a string.
Each todo should also get an unique autogenerated id every time it is created
The expected API endpoints are defined below,
1.GET /todos - Retrieve all todo items
  Description: Returns a list of all todo items.
  Response: 200 OK with an array of todo items in JSON format.
  Example: GET http://localhost:3000/todos
  
2.GET /todos/:id - Retrieve a specific todo item by ID
  Description: Returns a specific todo item identified by its ID.
  Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
  Example: GET http://localhost:3000/todos/123
  
3. POST /todos - Create a new todo item
  Description: Creates a new todo item.
  Request Body: JSON object representing the todo item.
  Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
  Example: POST http://localhost:3000/todos
  Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
  
4. PUT /todos/:id - Update an existing todo item by ID
  Description: Updates an existing todo item identified by its ID.
  Request Body: JSON object representing the updated todo item.
  Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
  Example: PUT http://localhost:3000/todos/123
  Request Body: { "title": "Buy groceries", "completed": true }
  
5. DELETE /todos/:id - Delete a todo item by ID
  Description: Deletes a todo item identified by its ID.
  Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
  Example: DELETE http://localhost:3000/todos/123

  - For any other route not defined in the server return 404

Testing the server - run `npm run test-todoServer` command in terminal
*/

// load libraries
const fs = require("fs");
const express = require("express");
const bodyParser = require("body-parser"); // middleware for req.body props

// initialize app
const app = express();

// run middleware (location based)
app.use(express.json());
app.use(bodyParser.json()); // parse json type post data

// global variables
let filePath = "express/express-practice/todos.json";

app.post("/todos", function(req, res){

  let uid = Math.floor(Math.random() * 1e9);
  let newToDo = {
    title: req.body.title,
    description: req.body.description,
    completed: req.body.completed,
  }

  fs.readFile(filePath, "utf-8", (errorRead, data) =>{
    if (errorRead){
      res.status(500).json({
        message: "Internal Server Error: Could NOT load the tasks",
        result: {},
      })
      return;
    }
    
    let toDos = JSON.parse(data);
    Object.defineProperty(toDos, uid, {
      value: newToDo,
      writable: true,
      enumerable: true,
      configurable: true,
    });

    fs.writeFile(filePath, JSON.stringify(toDos), (errorWrite) => {
      if (errorWrite) {
        res.status(500).json({
          message: "Internal Server Error: Could NOT add the new task",
          result: {},
        });
        return;
      }
      res.status(201).json({
        message: "Successfully added the task!",
        result: toDos,
      });
    });
    return;
  })
});

app.get("/todos", function(req, res){
  fs.readFile(filePath, "utf-8", (errorRead, data) => {
    if (errorRead){
      res.status(500).json({
        message: "Internal Server Error: Could NOT read todos",
        result: {},
      });
      return;
    }
    let toDos = JSON.parse(data);
    res.status(200).json({
      message: "Success: Loaded the tasks",
      result: toDos,
    });
    return;
  })
});

app.get("/todos/:id", function(req, res){
  fs.readFile(filePath, "utf-8", (errorRead, data) => {
    if (errorRead) {
      res.status(500).json({
        message: "Internal Server Error: Could NOT read todos",
        result: {},
      })
      return;
    }

    let toDos = JSON.parse(data);
    let uid = req.params.id;

    if (!Object.keys(toDos).includes(uid)) {
      res.status(404).json({
        message: "Failure: Could NOT locate specific task",
        result: {},
      });
      return;
    }

    res.status(200).json({
      message: "Success: Loaded the specific task",
      result: toDos[uid],
    });
    return;
  })
});


app.put("/todos/:id", function(req, res){
  fs.readFile(filePath, "utf-8", (errorRead, data) => {
    if (errorRead) {
      res.status(500).json({
        message: "Internal Server Error: Could NOT read todos",
        result: {},
      })
      return;
    }

    let toDos = JSON.parse(data);
    let uid = req.params.id;

    if (!Object.keys(toDos).includes(uid)) {
      res.status(404).json({
        message: "Failure: Could NOT locate specific task",
        result: {},
      });
      return;
    }

    if (req.body.title != undefined){
      toDos[uid].title = req.body.title;
    }
    if (req.body.description != undefined){
      toDos[uid].description = req.body.description;
    }
    if (req.body.completed != undefined){
      toDos[uid].completed = req.body.completed;
    }

    fs.writeFile(filePath, JSON.stringify(toDos), (errorWrite) => {
      if (errorWrite) {
        res.status(500).json({
          message: "Internal Server Error: Could NOT update the task",
          result: {},
        });
        return;
      }
      res.status(200).json({
        message: "Successfully updated the task!",
        result: toDos,
      });
    });
    return;
  });
});

app.delete("/todos/:id", function(req, res){

  fs.readFile(filePath, "utf-8", (errorRead, data) => {
    if (errorRead) {
      res.status(500).json({
        message: "Internal Server Error: Could NOT read todos",
        result: {},
      })
      return;
    }

    let toDos = JSON.parse(data);
    let uid = req.params.id;

    if (!Object.keys(toDos).includes(uid)) {
      res.status(404).json({
        message: "Failure: Could NOT locate specific task",
        result: {},
      });
      return;
    }

    delete toDos[uid];

    fs.writeFile(filePath, JSON.stringify(toDos), (errorWrite) => {
      if (errorWrite) {
        res.status(500).json({
          message: "Internal Server Error: Could NOT delete the task",
          result: {},
        });
        return;
      }
      res.status(200).json({
        message: "Successfully deleted the task!",
        result: toDos,
      });
    });
    return;
  });
});

// global catch
app.use(function errorHandler(req, res, next){
  res.status(404).json({
    message: "Failure: Accessing an invalid route",
    result: {},
  })
})

app.listen(3000);
// module.exports = app;
